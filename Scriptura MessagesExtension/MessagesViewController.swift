//
//  MessagesViewController.swift
//  Scriptura MessagesExtension
//
//  Created by Xcode Developer on 1/28/24.
//


// TO-DO:
//      Use the message text field that is part of the Messages app for both the prompt and response text fields
//      Use Undo Manager to slip between a prompt and a reponse (if necessary)
//      Use the MSMessagesAppViewController for custom instructions and interactive cbat

import UIKit
import SwiftUI
import Messages
import Foundation
import Combine

class MessagesViewController: MSMessagesAppViewController, UITextViewDelegate {
    var conversation: MSConversation?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
//        self.promptTextView.layer.backgroundColor = UIColor.tertiarySystemBackground.cgColor
//        self.responseTextView.layer.backgroundColor = UIColor.tertiarySystemBackground.cgColor
//        self.roleTextView.layer.backgroundColor = UIColor.tertiarySystemBackground.cgColor
    }

    
    func sendTextMessage(text: String) {
        let conversation = activeConversation!
        
        let message = MSMessage()
        let layout = MSMessageTemplateLayout()
        layout.caption = text
        message.layout = layout
        
        conversation.insert(message) { error in
            if let error = error {
                print("Error occurred: \(error)")
            }
        }
    }
    
//    @IBOutlet weak var promptTextView: UITextView!
//    @IBOutlet weak var responseTextView: UITextView!
//    @IBOutlet weak var roleTextView: UITextView!
//    @IBOutlet weak var promptButton: UIButton!
//    @IBOutlet weak var responseButton: UIButton!
//    @IBOutlet weak var roleButton: UIButton!
//    
//    @IBAction func promptButtonTapped(_ sender: UIButton) {
////        chatData.addMessage(message: self.roleTextView.text + ": " + self.promptTextView.text)
//    }
//    
//    @IBAction func responseButtonTapped(_ sender: UIButton) {
//        if let text = self.responseTextView.text, !text.isEmpty {
//            sendTextMessage(text: text)
//        }
//    }
//    
//    @IBAction func roleButtonTapped(_ sender: UIButton) {
////        chatData.assistant(text_view: self.responseTextView)
////        chatData.thread()
//    }
//    
    // To-Do: Use the insert func of NSConversation to insert the ChatGPT response
    // func insert(MSMessage, completionHandler: ((Error?) -> Void)?)
    // Inserts a message object into the Messages appâ€™s input field.
    
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        self.conversation = conversation
        let rootView = SwiftUIView().environment(\.msConversation, conversation)
        let hostingController = UIHostingController(rootView: rootView)
        
        // Add the hosting controller as a child view controller
        addChild(hostingController)
        view.addSubview(hostingController.view)
        hostingController.didMove(toParent: self)
        
        // Use Auto Layout to expand the SwiftUI view to fill the entire view
        hostingController.view.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            hostingController.view.topAnchor.constraint(equalTo: view.topAnchor),
            hostingController.view.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            hostingController.view.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            hostingController.view.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
}
