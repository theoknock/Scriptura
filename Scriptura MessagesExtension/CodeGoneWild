    func textViewDidEndEditing(_ textView: UITextView) {
        // Code to execute when user has ended editing
        if (textView == self.roleTextView) {
            chatData.assistant(instructions: self.roleTextView.text)
            chatData.thread()
            //            chatData.modify_assistant(instructions: self.roleTextView.text)
        } else if (textView == self.promptTextView) {
            self.promptButtonTapped(self.promptButton)
        } else if (textView == self.responseTextView) {
            self.responseButtonTapped(self.responseButton)
        }
    }
    
        func textViewShouldEndEditing(_ textView: UITextView) -> Bool {
        if (textView == self.roleTextView) {
            chatData.modify_assistant(instructions: textView.text)
        }
        
        return true
    }
    
    
        func modify_assistant(instructions: String) {
        self.assistant_id = String()
        
        let url = URL(string: "https://api.openai.com/v1/assistants/" + self.assistant_id)!
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        request.addValue("Bearer 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", forHTTPHeaderField: "Authorization")
        request.addValue("org-30HBRKuB7MPad1UstimL6G8o", forHTTPHeaderField: "OpenAI-Organization")
        request.addValue("assistants=v1", forHTTPHeaderField: "OpenAI-Beta")
        
        //        let type: [Dictionary] = [["type": "code_interpreter"]]
        let assistant_request: Dictionary =
        [
            "instructions": instructions,
            "name": "Message Writing Assistant",
            "tools": nil,
            "model": "gpt-4"
        ] as [String : Any]
        
        let jsonData = try! JSONSerialization.data(withJSONObject: assistant_request, options: [])
        request.httpBody = jsonData
        
        let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
            if error == nil && data != nil {
                DispatchQueue.main.async {
                    do {
                        if let assistant_response = try JSONSerialization.jsonObject(with: data!, options: []) as? [String: Any] {
                            self.assistant_id = {
                                //                                defer {
                                //                                    self.thread()
                                //                                }
                                return assistant_response["id"] as? String
                            }() ?? {
                                let assistant_id_err = ((assistant_response)["error"] as? [String: Any])!.description
                                defer {
                                    print("Assistant ID (error) " + assistant_id_err)
                                    self.modify_assistant(instructions: instructions)
                                }
                                return assistant_id_err
                            }()
                            print("Assistant ID " + self.assistant_id)
                        }
                    } catch {
                        print("Assistant ID (exception) " + error.localizedDescription)
                    }
                }
            }
        }
        task.resume()
    }
    





    func retrieve() {
        print("retrieve")
        let url = URL(string: "https://api.openai.com/v1/threads/" + self.thread_id + "/runs/" + self.run_id)!
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        request.addValue("Bearer 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", forHTTPHeaderField: "Authorization")
        request.addValue("org-30HBRKuB7MPad1UstimL6G8o", forHTTPHeaderField: "OpenAI-Organization")
        request.addValue("assistants=v1", forHTTPHeaderField: "OpenAI-Beta")
        
        let session = URLSession.shared
        let task = session.dataTask(with: request) { (data, response, error) in
            if error == nil && data != nil {
                DispatchQueue.main.async {
                    do {
                        if let retrieve_response = try JSONSerialization.jsonObject(with: data!, options: []) as? [String: Any] {
                            print("retrieve_response")
                            if let status = retrieve_response["status"] as? String {
                                print("Status " + status)
                                if status != "completed" {
                                    DispatchQueue.main.asyncAfter(deadline: .now() + 1.0, execute: {
                                        self.retrieve()
                                    })
                                } else {
                                    self.list()
                                }
                            } else {
                                print("retrieve_response error \(retrieve_response)")
                            }
                        }
                    } catch {
                        // Display error
                        print(error.localizedDescription)
                    }
                }
            }
        }
        task.resume()
        
        //        let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
        //            if error == nil && data != nil {
        //                DispatchQueue.main.async {
        //                    do {
        //                        if let retrieve_response = try JSONSerialization.jsonObject(with: data!, options: []) as? [String: Any] {
        //                            self.status_id = {
        //                                let status = retrieve_response["status"] as? String
        //                                // TO-DO: Insert status check here
        //                                defer {
        //                                    if status != "completed" {
        //                                        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0, execute: {
        //                                            self.retrieve()
        //                                        })
        //                                    } else {
        //                                        self.list()
        //                                    }
        //                                }
        //                                return status
        //                            }() ?? {
        //                                defer {
        //                                    print("Retrieve Response ID (error) " + error!.localizedDescription)
        //                                    DispatchQueue.main.asyncAfter(deadline: .now() + 2.0, execute: {
        //                                        self.retrieve()
        //                                    })
        //                                }
        //                                return "Retrieve Response ID (error)"
        //                            }()
        //
        //                            // TO-DO: Insert status check here
        //                            print("Retrieve Response ID " + self.status_id)
        //                        }
        //                    } catch {
        //                        print("Retrieve Response ID (exception) " + error.localizedDescription)
        //                    }
        //                }
        //            }
        //        }
        //        task.resume()
    }
    
    
    var cancellables = Set<AnyCancellable>()
    
    func list() {
        let url = URL(string: "https://api.openai.com/v1/threads/" + self.thread_id + "/messages")!
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        request.addValue("Bearer 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", forHTTPHeaderField: "Authorization")
        request.addValue("org-30HBRKuB7MPad1UstimL6G8o", forHTTPHeaderField: "OpenAI-Organization")
        request.addValue("assistants=v1", forHTTPHeaderField: "OpenAI-Beta")
        
        URLSession.shared.dataTaskPublisher(for: request)
            .receive(on: DispatchQueue.main)
            .sink(receiveCompletion: { completion in
                switch completion {
                case .finished:
                    break
                case .failure(let error):
                    print("Error: \(error)")
                }
            }, receiveValue: { data, response in
                guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {
                    print("Error with the response, unexpected status code: \(response)")
                    return
                }
                // Process the streaming data here
                print("Received data chunk: \(data)")
            })
            .store(in: &cancellables)
    }
